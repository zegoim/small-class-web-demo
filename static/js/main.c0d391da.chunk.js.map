{"version":3,"sources":["assets/images/02-bg.jpg","components/DynamicLoad.tsx","components/GlobalDialog.tsx","routes/index.tsx","serviceWorker.ts","index.tsx","utils/prefixUrl.ts","utils/themeContext.ts"],"names":["module","exports","__webpack_require__","p","DynamicLoad","state","mod","_this2","this","_this$props","props","dynamicComponent","Object","objectWithoutProperties","then","result","Mod","default","setState","react","catch","err","console","error","React","GlobalDialog","_React$Component","_getPrototypeOf2","_this","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","context","setDialogProps","dialogProps","isPrevSaved","notConfirmedProps","push","removePrevProps","index","indexOf","splice","closeDialog","propsSize","objectSpread","defaultShow","prevDialogProps","slice","inherits","createClass","key","value","theme","esm_extends","styles","style","root","prefixStyle","getStyles","prepareStyles","className","_ref","originProps","ContentDialog_default","a","assign","showCloseButton","primaryButtonText","secondaryButtonText","primaryButtonAction","e","secondaryButtonAction","closeButtonAction","onCloseDialog","contextTypes","PropTypes","defaultProps","revealEffect","effectEnable","hoverSize","borderWidth","hoverColor","accent","Boolean","window","location","hostname","match","ReactDOM","render","react_default","createElement","themeContext","Provider","Theme","components_GlobalDialog","ref","dialog","setDialog","react_router_dom","react_router","path","prefixUrl","component","DynamicLoad_DynamicLoad","Promise","all","bind","document","getElementById","navigator","serviceWorker","ready","registration","unregister","d","__webpack_exports__","protocol","ThemeContext","react__WEBPACK_IMPORTED_MODULE_0__","react_uwp_Theme__WEBPACK_IMPORTED_MODULE_1__","getTheme","useFluentDesign","desktopBackgroundImage","require","themeName"],"mappings":"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","file":"static/js/main.c0d391da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/02-bg.5d33f942.jpg\";","import * as React from \"react\";\r\n\r\nexport interface DynamicLoadProps {\r\n  dynamicComponent?: Promise<any>;\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface DynamicLoadState {\r\n  mod?: any;\r\n}\r\n\r\nexport default class DynamicLoad extends React.Component<DynamicLoadProps, DynamicLoadState> {\r\n  state: DynamicLoadState = {\r\n    mod: null\r\n  };\r\n\r\n  componentWillMount() {\r\n    const { dynamicComponent, ...props } = this.props;\r\n    if (dynamicComponent) {\r\n      dynamicComponent\r\n        .then(result => {\r\n          const Mod = result.default;\r\n          this.setState({ mod: Mod ? <Mod  {...props} /> : null });\r\n        })\r\n        .catch(err => {\r\n          console.error(err);\r\n          this.setState({\r\n            mod: null\r\n          });\r\n        });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return this.state.mod;\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport * as PropTypes from \"prop-types\";\r\nimport ContentDialog, { ContentDialogProps } from \"react-uwp/ContentDialog\";\r\n\r\nexport interface DialogProps extends ContentDialogProps {\r\n  isPrevSaved?: boolean;\r\n}\r\n\r\nexport interface GlobalDialogState {\r\n  dialogProps?: DialogProps;\r\n}\r\n\r\nexport interface GlobalDialogProps extends DialogProps, React.HTMLAttributes<HTMLDivElement> {}\r\n\r\nexport class GlobalDialog extends React.Component<GlobalDialogProps, GlobalDialogState> {\r\n  static contextTypes = { theme: PropTypes.object };\r\n  context: { theme: ReactUWP.ThemeType };\r\n  state: GlobalDialogState = {};\r\n  static defaultProps: GlobalDialogProps = {\r\n    primaryButtonText: \"取消\",\r\n    secondaryButtonText: \"确定\"\r\n  };\r\n\r\n  setDialogProps = (dialogProps?: DialogProps) => {\r\n    if (dialogProps.isPrevSaved) {\r\n      this.notConfirmedProps.push(dialogProps);\r\n    }\r\n    this.setState({ dialogProps });\r\n  }\r\n\r\n  removePrevProps = (props: DialogProps) => {\r\n    const index = this.notConfirmedProps.indexOf(props);\r\n    if (index > -1) {\r\n      this.notConfirmedProps.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  notConfirmedProps: DialogProps[] = [];\r\n  closeDialog = () => {\r\n    const propsSize = this.notConfirmedProps.length;\r\n    const { dialogProps } = this.state;\r\n    if (dialogProps.isPrevSaved) {\r\n      this.removePrevProps(dialogProps);\r\n    }\r\n\r\n    this.setState({\r\n      dialogProps: {\r\n        ...dialogProps,\r\n        defaultShow: false\r\n      }\r\n    }, propsSize > 0 ? () => {\r\n      const prevDialogProps = this.notConfirmedProps.slice(-1)[0];\r\n      if (prevDialogProps) {\r\n        this.setState({ dialogProps: prevDialogProps });\r\n        this.notConfirmedProps.splice(propsSize - 1, propsSize);\r\n      }\r\n    } : void 0);\r\n  }\r\n\r\n  render() {\r\n    const { ...attributes } = this.props;\r\n    const { theme } = this.context;\r\n    const styles = getStyles(this);\r\n    const classes = theme.prepareStyles({\r\n      className: \"GlobalDialog\",\r\n      styles\r\n    });\r\n    const { dialogProps } = this.state;\r\n    const { isPrevSaved, ...originProps } = dialogProps || {} as DialogProps;\r\n\r\n    return (\r\n      <ContentDialog\r\n        showCloseButton\r\n        {...originProps}\r\n        primaryButtonText={originProps.primaryButtonText === void 0 ? this.props.primaryButtonText : originProps.primaryButtonText}\r\n        secondaryButtonText={originProps.secondaryButtonText === void 0 ? this.props.secondaryButtonText : originProps.primaryButtonText}\r\n        primaryButtonAction={(e) => {\r\n          this.closeDialog();\r\n          if (originProps.primaryButtonAction) {\r\n            originProps.primaryButtonAction(e);\r\n          }\r\n        }}\r\n        secondaryButtonAction={(e) => {\r\n          this.closeDialog();\r\n          if (originProps.secondaryButtonAction) {\r\n            originProps.secondaryButtonAction(e);\r\n          }\r\n        }}\r\n        closeButtonAction={(e) => {\r\n          this.closeDialog();\r\n          if (originProps.closeButtonAction) {\r\n            originProps.closeButtonAction(e);\r\n          }\r\n        }}\r\n        onCloseDialog={() => {\r\n          this.closeDialog();\r\n          if (dialogProps.onCloseDialog) dialogProps.onCloseDialog();\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nfunction getStyles(GlobalDialog: GlobalDialog) {\r\n  const {\r\n    context: { theme },\r\n    props: { style }\r\n  } = GlobalDialog;\r\n  const { prefixStyle } = theme;\r\n\r\n  return {\r\n    root: prefixStyle({\r\n      ...style\r\n    })\r\n  };\r\n}\r\n\r\nexport default GlobalDialog;\r\n","import * as React from \"react\";\r\n\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport DynamicLoad from \"../components/DynamicLoad\";\r\nimport GlobalDialog from \"../components/GlobalDialog\";\r\nimport { Theme } from \"react-uwp/Theme\";\r\nimport { theme, ThemeContext } from \"../utils/themeContext\";\r\nimport { prefixUrl } from \"../utils/prefixUrl\";\r\nimport * as revealEffect from \"reveal-effect\";\r\n\r\nrevealEffect.setRevealConfig({\r\n  effectEnable: \"border\",\r\n  hoverSize: 200,\r\n  borderWidth: 4,\r\n  hoverColor: theme.accent\r\n});\r\n\r\nexport default () => (\r\n  <ThemeContext.Provider value={theme}>\r\n  <Theme theme={theme}>\r\n    <GlobalDialog\r\n      ref={dialog => {\r\n        if (dialog) window.setDialog = dialog.setDialogProps;\r\n      }}\r\n    />\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route\r\n          path={`${prefixUrl}TeacherRoom`}\r\n          component={(props: any) => <DynamicLoad {...props}\r\n          dynamicComponent={import (\"./TeacherRoom\")} />}\r\n        />\r\n        <Route\r\n          path={`${prefixUrl}StudentRoom`}\r\n          component={(props: any) => <DynamicLoad {...props}\r\n          dynamicComponent={import (\"./StudentRoom\")} />}\r\n        />\r\n        <Route\r\n          path={`${prefixUrl}StudentRoomWithStudent`}\r\n          component={(props: any) => <DynamicLoad {...props}\r\n          dynamicComponent={import (\"./StudentRoom\")} />}\r\n        />\r\n        <Route\r\n          path={`${prefixUrl}`}\r\n          component={(props: any) => <DynamicLoad {...props}\r\n          dynamicComponent={import (\"./Home\")} />}\r\n        />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  </Theme>\r\n  </ThemeContext.Provider>\r\n);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import \"core-js\";\r\nimport \"whatwg-fetch\";\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './routes';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// eslint-disable-next-line\r\nexport const __DEV__ = location.protocol !== \"https:\";\r\nexport const prefixUrl = __DEV__ ? \"/\" : \"/small-class-web-demo/\";\r\n","import * as React from \"react\";\r\nimport { getTheme } from \"react-uwp/Theme\";\r\n\r\nconst isDarkTheme = true;\r\nexport const theme: ReactUWP.ThemeType = getTheme({\r\n  useFluentDesign: true,\r\n  desktopBackgroundImage: require(\"../assets/images/02-bg.jpg\"),\r\n  themeName: isDarkTheme ? \"dark\" : \"light\",\r\n  accent: \"#0D70FF\"\r\n});\r\n\r\nexport const ThemeContext = React.createContext(theme);\r\n\r\nexport function makeStyles<T>() {\r\n\r\n}"],"sourceRoot":""}